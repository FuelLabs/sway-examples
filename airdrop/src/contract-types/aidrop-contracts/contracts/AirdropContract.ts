/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.1
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum AccessErrorInput { CallerNotOwner = 'CallerNotOwner', CallerNotPendingOwner = 'CallerNotPendingOwner', Paused = 'Paused', AirdropDone = 'AirdropDone', AirdropActive = 'AirdropActive', AlreadyClaimed = 'AlreadyClaimed', AlreadyInitialized = 'AlreadyInitialized' };
export enum AccessErrorOutput { CallerNotOwner = 'CallerNotOwner', CallerNotPendingOwner = 'CallerNotPendingOwner', Paused = 'Paused', AirdropDone = 'AirdropDone', AirdropActive = 'AirdropActive', AlreadyClaimed = 'AlreadyClaimed', AlreadyInitialized = 'AlreadyInitialized' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InputErrorInput { InvalidOwner = 'InvalidOwner' };
export enum InputErrorOutput { InvalidOwner = 'InvalidOwner' };
export enum ProofErrorInput { InvalidKey = 'InvalidKey', InvalidProofLength = 'InvalidProofLength' };
export enum ProofErrorOutput { InvalidKey = 'InvalidKey', InvalidProofLength = 'InvalidProofLength' };
export enum VerificationErrorInput { AccountIdToLarge = 'AccountIdToLarge', IncorrectAccount = 'IncorrectAccount', InvalidProof = 'InvalidProof', NoSigner = 'NoSigner' };
export enum VerificationErrorOutput { AccountIdToLarge = 'AccountIdToLarge', IncorrectAccount = 'IncorrectAccount', InvalidProof = 'InvalidProof', NoSigner = 'NoSigner' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ClaimEventInput = { amount: BigNumberish, claimer: string, to: IdentityInput };
export type ClaimEventOutput = { amount: BN, claimer: string, to: IdentityOutput };
export type ClawbackEventInput = { asset_id: AssetIdInput, amount: BigNumberish, to: IdentityInput };
export type ClawbackEventOutput = { asset_id: AssetIdOutput, amount: BN, to: IdentityOutput };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipTransferEventInput = { from: IdentityInput, to: IdentityInput };
export type OwnershipTransferEventOutput = { from: IdentityOutput, to: IdentityOutput };
export type OwnershipTransferInitiatedEventInput = { from: Option<IdentityInput>, to: IdentityInput };
export type OwnershipTransferInitiatedEventOutput = { from: Option<IdentityOutput>, to: IdentityOutput };
export type PauseChangeEventInput = { is_paused: boolean };
export type PauseChangeEventOutput = PauseChangeEventInput;

export type AirdropContractConfigurables = Partial<{
  MERKLE_ROOT: string;
  ASSET: AssetIdInput;
  END_TIME: BigNumberish;
  NUM_LEAVES: BigNumberish;
  INITIAL_OWNER: Option<IdentityInput<>>;
}>;

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum AccessError",
      "components": [
        {
          "name": "CallerNotOwner",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "CallerNotPendingOwner",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Paused",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "AirdropDone",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "AirdropActive",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "AlreadyClaimed",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "AlreadyInitialized",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum Identity",
      "components": [
        {
          "name": "Address",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "ContractId",
          "type": 15,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum InputError",
      "components": [
        {
          "name": "InvalidOwner",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        9
      ]
    },
    {
      "typeId": 7,
      "type": "enum ProofError",
      "components": [
        {
          "name": "InvalidKey",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidProofLength",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "enum VerificationError",
      "components": [
        {
          "name": "AccountIdToLarge",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "IncorrectAccount",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidProof",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "NoSigner",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "raw untyped ptr",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct Address",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "struct ClaimEvent",
      "components": [
        {
          "name": "amount",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "claimer",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "to",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "struct ClawbackEvent",
      "components": [
        {
          "name": "asset_id",
          "type": 12,
          "typeArguments": null
        },
        {
          "name": "amount",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "to",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "struct ContractId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 16,
      "type": "struct OwnershipTransferEvent",
      "components": [
        {
          "name": "from",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "to",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 17,
      "type": "struct OwnershipTransferInitiatedEvent",
      "components": [
        {
          "name": "from",
          "type": 6,
          "typeArguments": [
            {
              "name": "",
              "type": 4,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "to",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 18,
      "type": "struct PauseChangeEvent",
      "components": [
        {
          "name": "is_paused",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 19,
      "type": "struct RawVec",
      "components": [
        {
          "name": "ptr",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": 21,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        9
      ]
    },
    {
      "typeId": 20,
      "type": "struct Vec",
      "components": [
        {
          "name": "buf",
          "type": 19,
          "typeArguments": [
            {
              "name": "",
              "type": 9,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "len",
          "type": 21,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        9
      ]
    },
    {
      "typeId": 21,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "amount",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "account",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "tree_index",
          "type": 21,
          "typeArguments": null
        },
        {
          "name": "proof",
          "type": 20,
          "typeArguments": [
            {
              "name": "",
              "type": 1,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "recipient",
          "type": 4,
          "typeArguments": null
        }
      ],
      "name": "claim",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "recipient",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "asset_id",
          "type": 12,
          "typeArguments": null
        }
      ],
      "name": "clawback",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "confirm_transfer_ownership",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "end_time",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": null
    },
    {
      "inputs": [],
      "name": "initialize",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "new_owner",
          "type": 4,
          "typeArguments": null
        }
      ],
      "name": "initiate_transfer_ownership",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "tree_index",
          "type": 21,
          "typeArguments": null
        }
      ],
      "name": "is_claimed",
      "output": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "is_paused",
      "output": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "merkle_root",
      "output": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "attributes": null
    },
    {
      "inputs": [],
      "name": "owner",
      "output": {
        "name": "",
        "type": 6,
        "typeArguments": [
          {
            "name": "",
            "type": 4,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "paused",
          "type": 2,
          "typeArguments": null
        }
      ],
      "name": "set_paused",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "10838512726835481516",
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": "9443269252769822483",
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": "13375681076267723605",
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    },
    {
      "logId": "2279040052662566249",
      "loggedType": {
        "name": "",
        "type": 13,
        "typeArguments": []
      }
    },
    {
      "logId": "6542002447493794314",
      "loggedType": {
        "name": "",
        "type": 14,
        "typeArguments": []
      }
    },
    {
      "logId": "12642928112293151061",
      "loggedType": {
        "name": "",
        "type": 16,
        "typeArguments": []
      }
    },
    {
      "logId": "4976236512326244199",
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": "15923635300725469917",
      "loggedType": {
        "name": "",
        "type": 17,
        "typeArguments": []
      }
    },
    {
      "logId": "7545640472509528513",
      "loggedType": {
        "name": "",
        "type": 18,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "MERKLE_ROOT",
      "configurableType": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "offset": 37224
    },
    {
      "name": "ASSET",
      "configurableType": {
        "name": "",
        "type": 12,
        "typeArguments": []
      },
      "offset": 37288
    },
    {
      "name": "END_TIME",
      "configurableType": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "offset": 37352
    },
    {
      "name": "NUM_LEAVES",
      "configurableType": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "offset": 37264
    },
    {
      "name": "INITIAL_OWNER",
      "configurableType": {
        "name": "",
        "type": 6,
        "typeArguments": [
          {
            "name": "",
            "type": 4,
            "typeArguments": []
          }
        ]
      },
      "offset": 37368
    }
  ]
};

const storageSlots: StorageSlot[] = [
  {
    "key": "02dac99c283f16bc91b74f6942db7f012699a2ad51272b15207b9cc14a70dbae",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "6294951dcb0a9111a517be5cf4785670ff4e166fb5ab9c33b17e6881b48e964f",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "94b2b70d20da552763c7614981b2a4d984380d7ed4e54c01b28c914e79e44bd5",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "94b2b70d20da552763c7614981b2a4d984380d7ed4e54c01b28c914e79e44bd6",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "de9090cb50e71c2588c773487d1da7066d0c719849a7e58dc8b6397a25c567c0",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "de9090cb50e71c2588c773487d1da7066d0c719849a7e58dc8b6397a25c567c1",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "f383b0ce51358be57daa3b725fe44acdb2d880604e367199080b4379c41bb6ed",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "f383b0ce51358be57daa3b725fe44acdb2d880604e367199080b4379c41bb6ee",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class AirdropContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    claim: FunctionFragment;
    clawback: FunctionFragment;
    confirm_transfer_ownership: FunctionFragment;
    end_time: FunctionFragment;
    initialize: FunctionFragment;
    initiate_transfer_ownership: FunctionFragment;
    is_claimed: FunctionFragment;
    is_paused: FunctionFragment;
    merkle_root: FunctionFragment;
    owner: FunctionFragment;
    set_paused: FunctionFragment;
  };
}

export class AirdropContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: AirdropContractInterface;
  declare functions: {
    claim: InvokeFunction<[amount: BigNumberish, account: string, tree_index: BigNumberish, proof: Vec<string>, recipient: IdentityInput], BN>;
    clawback: InvokeFunction<[recipient: IdentityInput, asset_id: AssetIdInput], BN>;
    confirm_transfer_ownership: InvokeFunction<[], void>;
    end_time: InvokeFunction<[], BN>;
    initialize: InvokeFunction<[], void>;
    initiate_transfer_ownership: InvokeFunction<[new_owner: IdentityInput], void>;
    is_claimed: InvokeFunction<[tree_index: BigNumberish], boolean>;
    is_paused: InvokeFunction<[], boolean>;
    merkle_root: InvokeFunction<[], string>;
    owner: InvokeFunction<[], Option<IdentityOutput>>;
    set_paused: InvokeFunction<[paused: boolean], void>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
